/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Health probe */
    get: operations["getHealth"];
  };
  "/sessions": {
    /** List live + historical sessions */
    get: operations["listSessions"];
  };
  "/trace/{session_id}": {
    /** Download gzipped JSONL trace */
    get: operations["getTrace"];
    parameters: {
      path: {
        session_id: components["parameters"]["session_id"];
      };
    };
  };
  "/events": {
    /** Real-time Server-Sent Events stream */
    get: operations["getEvents"];
  };
  "/signal/{session_id}": {
    /** Deliver control signal to a running workflow */
    post: operations["postSignal"];
    parameters: {
      path: {
        session_id: components["parameters"]["session_id"];
      };
    };
  };
  "/cancel/{session_id}": {
    /** Cancel a running workflow */
    post: operations["cancelWorkflow"];
    parameters: {
      path: {
        session_id: components["parameters"]["session_id"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HealthResponse: {
      /** @constant */
      name: "mcp-agent-inspector";
      version: string;
    };
    SessionMeta: {
      /** @description Internal session_id (UUID or workflow_id) */
      id: string;
      /** @enum {string} */
      status: "running" | "paused" | "failed" | "completed";
      /** @enum {string} */
      engine: "asyncio" | "temporal" | "inbound";
      /** Format: date-time */
      started_at: string;
      /** Format: date-time */
      ended_at?: string;
      title: string;
      tags?: string[];
    };
    SignalRequest: {
      /** @enum {string} */
      signal: "human_input_answer" | "pause" | "resume";
      /** @description Arbitrary JSON payload for the signal */
      payload?: {
        [key: string]: unknown;
      };
    };
  };
  responses: never;
  parameters: {
    session_id: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Health probe */
  getHealth: {
    responses: {
      /** @description Inspector is alive */
      200: {
        content: {
          "application/json": components["schemas"]["HealthResponse"];
        };
      };
    };
  };
  /** List live + historical sessions */
  listSessions: {
    responses: {
      /** @description Array of SessionMeta */
      200: {
        content: {
          "application/json": {
            sessions: components["schemas"]["SessionMeta"][];
            /** @description Present only if Temporal lookup failed (graceful degradation). */
            temporal_error?: string;
          };
        };
      };
    };
  };
  /** Download gzipped JSONL trace */
  getTrace: {
    parameters: {
      path: {
        session_id: components["parameters"]["session_id"];
      };
    };
    responses: {
      /** @description Full file */
      200: {
        headers: {
          "Content-Encoding"?: "gzip";
        };
        content: {
          "application/x-jsonlines+gzip": string;
        };
      };
      /** @description Partial content (Range request) */
      206: {
        headers: {
          "Content-Range"?: string;
        };
        content: never;
      };
    };
  };
  /** Real-time Server-Sent Events stream */
  getEvents: {
    responses: {
      /** @description Continuous text/event-stream */
      200: {
        content: {
          "text/event-stream": string;
        };
      };
    };
  };
  /** Deliver control signal to a running workflow */
  postSignal: {
    parameters: {
      path: {
        session_id: components["parameters"]["session_id"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalRequest"];
      };
    };
    responses: {
      /** @description Accepted */
      200: {
        content: {
          "application/json": {
            ok: boolean;
          };
        };
      };
      /** @description Unknown session */
      404: {
        content: never;
      };
    };
  };
  /** Cancel a running workflow */
  cancelWorkflow: {
    parameters: {
      path: {
        session_id: components["parameters"]["session_id"];
      };
    };
    responses: {
      /** @description Accepted */
      200: {
        content: {
          "application/json": {
            ok: boolean;
          };
        };
      };
      /** @description Unknown session */
      404: {
        content: never;
      };
    };
  };
}
