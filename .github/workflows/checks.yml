name: Linting, formatting and other checks on codebase

on:
  workflow_call:

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --frozen --all-extras --dev

      - name: Run ruff format check
        run: uv run scripts/format.py

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --frozen --all-extras --dev

      - name: Run pyright
        run: uv run scripts/lint.py

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install dependencies
        run: make sync
      - name: Run tests with coverage
        run: make coverage

  contract-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --frozen --all-extras --dev

      - name: Start Inspector test server
        run: |
          # Create a minimal test script to start the inspector
          cat > test_inspector_server.py << 'EOF'
          import sys
          import time
          try:
              from mcp_agent.inspector import mount
          except ImportError as e:
              print(f"Error: {e}", file=sys.stderr)
              sys.exit(1)
          
          # Start inspector in standalone mode
          try:
              mount(app=None, port=7800)
              print("Inspector server started successfully")
          except Exception as e:
              print(f"Error starting inspector: {e}", file=sys.stderr)
              sys.exit(1)
          
          # Keep the server running
          try:
              while True:
                  time.sleep(1)
          except KeyboardInterrupt:
              pass
          EOF
          
          # Start the server in the background
          uv run python test_inspector_server.py &
          INSPECTOR_PID=$!
          
          # Store PID for cleanup
          echo $INSPECTOR_PID > inspector.pid
          
          # Wait for server to be ready
          server_ready=false
          for i in {1..30}; do
            if curl -s http://localhost:7800/_inspector/health > /dev/null 2>&1; then
              echo "Inspector server is ready"
              server_ready=true
              break
            fi
            echo "Waiting for Inspector server to start... (attempt $i/30)"
            sleep 1
          done
          
          if [ "$server_ready" = false ]; then
            echo "Inspector server failed to start within 30 seconds"
            if [ -f inspector.pid ]; then
              kill $(cat inspector.pid) 2>/dev/null || true
            fi
            exit 1
          fi

      - name: Run contract tests
        run: |
          uv run schemathesis run docs/inspector/openapi.yaml --url http://localhost:7800/_inspector --checks all --workers auto
          
      - name: Cleanup Inspector server
        if: always()
        run: |
          if [ -f inspector.pid ]; then
            kill $(cat inspector.pid) 2>/dev/null || true
            rm inspector.pid
          fi
